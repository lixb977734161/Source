php 使用__autoload()在运行期间加载、修改、添加函数
文件ServiceLocator.php
<?php
interface Locator
{
	public function canLocate($class);
	
	public function getPath($class);
}

class ServiceLocator
{
	protected static $locators = array();
	
	public static function attachLocator(Locator $locator,$key)
	{
		self::$locators[$key] = $locator;
	}
	
	public static  function dropLocator($key)
	{
		if(self::isActiveLocator($key))
		{
			unset(self::$locators[$key]);
			return true;
		}
		else 
			return false;
	}
	public static function isActiveLocator($key)
	{
		return array_key_exists($key, self::$locators);
	}
	
	public function load($class)
	{
		foreach (self::$locators as $key => $obj)
		{
			if($obj -> canLocate($class))
			{
				require_once $obj->getPath($class);
				if(class_exists($class)) return ;
			}
		}
	}
	
}

function __autoload($class)
{
	$locator = new ServiceLocator();
	$locator->load($class);
}

文件myautoload.php
<?php
require '文件ServiceLocator.php';

class PearLocator implements Locator
{
	protected $base;
	
	public function __construct($directory=".")
	{
		$this->base = (string)$directory;
	}
	
	public function canLocate($class){
		$path = $this->getPath($class);
		if(file_exists($path)) return true;
		else return false;
	}
	public function getPath($class)
	{
		return $this->base.'/'.str_replace('_', '/', $class).".class.php";
	}
}

ServiceLocator::attachLocator(new PearLocator(), "PEAR");


$obj = new Test();

文件Test.class.php
<?php
class Test
{
	public function Test()
	{
		echo "\nin Test construct\n";
	}
}
